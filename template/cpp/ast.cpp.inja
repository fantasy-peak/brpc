#ifndef _{{upper(node.property.namespace)}}_H_
#define _{{upper(node.property.namespace)}}_H_

#include <variant>
#include <typeinfo>
#include <optional>
#include <unordered_map>
#include <any>
#include <mutex>
#include <sstream>

#include <nlohmann/json.hpp>
#include <msgpack.hpp>

#define FRPC_ERROR_FORMAT(message) [] (const std::string& info) { std::stringstream ss; ss << __FILE__ << ":" << __LINE__ << " " << info ; return ss.str(); } (message)

// clang-format off
#include <impl/bi_channel.h>
#include <impl/uni_channel.h>
#include <impl/monitor.h>
#include <impl/utils.h>
#include <impl/to_string.h>
#include <impl/from_string.h>
#include <impl/date_time.h>
#ifdef __cpp_impl_coroutine
#include <impl/coroutine.h>
#include <impl/asio_context_pool.h>
#endif

{% for value in node.value.enum %}
 #include <data/{{_snake(value.enum_name)}}.h>
{% endfor %}

{% for value in node.value.struct %}
#include <data/{{_snake(value.struct_name)}}.h>
{% endfor %}
// clang-format on

{% for value in node.value.interface %}
    {% if value.pattern == "bi" %}
        {% include "bi.inja" %}
    {% endif %}
{% endfor %}

{% for value in node.value.interface %}
    {% if value.pattern == "uni" %}
        {% include "uni.inja" %}
    {% endif %}
{% endfor %}

{% for value in node.value.interface %}
    {% if value.pattern == "bi_stream" %}
        {% include "bi_stream.inja" %}
    {% endif %}
{% endfor %}

#endif //_{{upper(node.property.namespace)}}_H_
