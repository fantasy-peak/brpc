namespace {{node.property.namespace}} {

enum class {{value.enum_name}} : {{value.value_type}} {
	{% for field in value.definitions %}
		{{field.name}} = {{field.default}}, // {{field.comment}}
	{% endfor %}
};

inline std::string_view toString(const {{value.enum_name}} value) {
	switch (value) {
	{% for field in value.definitions %}
		case {{value.enum_name}}::{{field.name}}:
			return "{{field.default}}";
	{% endfor %}
	default:
		return "???";
	}
}

template <>
inline {{value.enum_name}} fromString<{{value.enum_name}}>(const std::string& value) {
	{% for field in value.definitions %}
	if (value == "{{field.name}}")
		return {{value.enum_name}}::{{field.name}};
	{% endfor %}
	throw std::bad_cast();
}

} // {{node.property.namespace}}

MSGPACK_ADD_ENUM({{node.property.namespace}}::{{value.enum_name}})
